/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package com.quartz

import com.opencsv.CSVWriter
import groovyx.net.http.HttpBuilder
import groovyx.net.http.HttpException
import groovyx.net.http.optional.Download
import org.jsoup.nodes.Document
import org.jsoup.nodes.Element


class App {


    static void main(String[] args) {

        String url = "https://www.gov.br/ans/pt-br"

        getData(url)

    }

    static void getData(String url){

        Document mainPage = getHtmlParser(url)

        String urlProviderSpace = mainPage.getElementById("ce89116a-3e62-47ac-9325-ebec8ea95473").select('a').first().attr('href')

        Document consumerPage = getHtmlParser(urlProviderSpace)

        String tissUrl = consumerPage.select('a.govbr-card-content').attr('href')

        Document tissPage = getHtmlParser(tissUrl)

        List<Element> insideTissAnchorList = tissPage.select('.callout').select('a')
        List<String> insideTissUrlList = new ArrayList<>()

        for(Element element : insideTissAnchorList){
            insideTissUrlList << element.attr('href')
        }

        String tissLastestVersionUrl = insideTissUrlList[0]
        String tissHistoryUrl = insideTissUrlList[1]
        String tissRelatedTableUrl = insideTissUrlList[2]

        getTissLastestVersion(tissLastestVersionUrl)
        getTissHistory(tissHistoryUrl)
        tissRelatedTable(tissRelatedTableUrl)


    }

    static Document getHtmlParser(String url){
        Document page = HttpBuilder.configure({
            request.uri = url
        }).get()

        return page

    }

    static void getTissLastestVersion(String url){
        Document lastVersionPage = getHtmlParser(url)

        List<Element> tissTableRows = lastVersionPage.select('table.table-bordered').select('tbody').first().select('tr')

        for(Element row: tissTableRows){
            if(!row.select('td').first().text().matches('Componente de Comunicação')){
                continue
            }

            String downloadUrl = row.select('a').first().attr('href')

            downloadFile(downloadUrl, 'latestTiss')

        }



    }

    static void getTissHistory(String url){
        Document historyPage = getHtmlParser(url)

        List<Element> tissHistoryTableRows = historyPage.getElementById('parent-fieldname-text').select('tbody').first().select('tr')

        int targetYear = 2016

        List<String[]> tableData = new ArrayList<>()

        for(Element row: tissHistoryTableRows){

            String competence = row.select('td')[0].text()

            if(Integer.parseInt(competence.split(/\w*\//)[1]) < targetYear){
                continue
            }

            String publication = row.select('td')[1].text()
            String beginOfValidity = row.select('td')[2].text()


            tableData<< [competence, publication, beginOfValidity]
        }

        generateCsvFile(tableData)

    }

    static void tissRelatedTable(String url){
        Document relatedTablePage = getHtmlParser(url)

        String errorOnSendingTableURL = relatedTablePage.select('a.internal-link').first().attr('href')

        downloadFile(errorOnSendingTableURL, 'ANSError')

    }

    static void downloadFile(String url, String fileName)throws IOException{

        String filePath = "./downloads/${fileName}.xlsx"
        File newFile = new File(filePath)

        File build = HttpBuilder.configure ({
            request.uri = url
        }).get({
            Download.toFile(delegate,newFile)
        })

        build.createNewFile()
    }

    static void generateCsvFile(List<String[]> list)throws IOException{

        String[] FILE_HEADER = ["Competence","Publication","Begin of Validity"]
        def fileName = 'tissHistoryTable.csv'

        CSVWriter writer = new CSVWriter(new FileWriter(new File('./downloads',fileName)))

        writer.writeNext(FILE_HEADER)

        for(String[] row: list){
            writer.writeNext(row)
        }
        writer.close()

    }




}
